plugins {
    id 'java'
    id 'application'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

mainClassName = 'com.dscalzi.aventibot.LaunchWrapper'

def versionObj = new Version(major: 0, minor: 81, revision: 0)

description = 'Highly customizable Discord Bot'

group = 'com.dscalzi'
archivesBaseName = 'AventiBot'
version = "$versionObj"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    implementation 'net.dv8tion:JDA:4.0.0_45'
    implementation 'com.sedmelluq:lavaplayer:1.3.20'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    
    implementation('net.sf.trove4j:trove4j:3.0.3') {
    	because 'JDA implementation dependency is used in creating console messages.'
    }
    implementation('org.apache.commons:commons-collections4:4.1') {
    	because 'JDA implementation dependency is used in RestFuture constructor.'
    }
}

compileJava.options.encoding = 'UTF-8'

processResources {

	from 'LICENSE.txt'
}

license {
    sourceSets = [project.sourceSets.main]
    header = rootProject.file('HEADER.txt')
    ext {
        name = 'Daniel D. Scalzi'
        year = '2016-2019'
        url = 'https://github.com/dscalzi/AventiBot'
    }
}

jar {
    archiveBaseName = project.name
    manifest {
        attributes 'Implementation-Version': version, 'Specification-Version': version
    }
}

shadowJar {
    archiveClassifier = 'dist'
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn shadowJar

    jar.mustRunAfter clean
    shadowJar.mustRunAfter jar
}

String getDependencyVersion(name) {
	def res = ''
	
	configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
		def id = artifact.moduleVersion.id
		if(id.name.equals(name)) {
			res = id.version
			return;
		}
	}
	
	return res
}

task updateReadme {
	def readMe = new File(project.rootDir.toString() + '/README.md')
	
	def txt = readMe.text.replaceFirst(/JDA-(.*?)-/, "JDA-${getDependencyVersion('JDA').replaceAll('_', '__')}-")
	readMe.text = txt.replaceFirst(/lavaplayer-(.*?)-/, "lavaplayer-${getDependencyVersion('lavaplayer')}-")
}

class Version {
    String major, minor, revision

    String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    String toString() {
        "${major}.${minor}.${revision}_$build"
    }
}