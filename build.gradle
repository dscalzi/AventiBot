plugins {
    id 'java'
    id 'application'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

mainClassName = 'com.dscalzi.aventibot.LaunchWrapper'

def versionObj = new Version(major: 5, minor: 0, revision: 0)

description = 'Highly customizable Discord Bot'

group = 'com.dscalzi'
archivesBaseName = 'AventiBot'
version = "$versionObj"

wrapper {
    gradleVersion = '7.6'
    distributionType = Wrapper.DistributionType.BIN
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://m2.dv8tion.net/releases' }
}

dependencies {

    // From JDA - Code safety
    compileOnly("com.google.code.findbugs:jsr305:3.0.2")
    compileOnly("org.jetbrains:annotations:23.0.0")

    implementation "com.google.code.gson:gson:${gsonVersion}"

    implementation "net.dv8tion:JDA:${jdaVersion}"
    implementation "com.sedmelluq:lavaplayer:${lavaplayerVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    implementation("net.sf.trove4j:trove4j:3.0.3") {
        because 'JDA implementation dependency is used in creating console messages.'
    }
    implementation("org.apache.commons:commons-collections4:4.4") {
        because 'JDA implementation dependency is used in RestFuture constructor.'
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

compileJava.options.encoding = 'UTF-8'

processResources {
    from 'LICENSE.txt'
}

license {
    header = rootProject.file('HEADER.txt')
    properties {
        name = 'Daniel D. Scalzi'
        year = '2016-2022'
        url = 'https://github.com/dscalzi/AventiBot'
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

javafx {
    version = "17"
    modules = [ 'javafx.controls',  'javafx.fxml' ]
}

jar {
    manifest {
        attributes 'Implementation-Version': archiveVersion.get(), 'Specification-Version': archiveVersion.get()
    }
}

shadowJar {
    archiveClassifier.set('dist')
}
assemble.dependsOn('shadowJar')

String getDependencyVersion(name) {
    def res = ''

    configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def id = artifact.moduleVersion.id
        if(id.name == name) {
            res = id.version
            return
        }
    }

    return res
}

task updateReadme {
    def readMe = new File(project.rootDir.toString() + '/README.md')

    def txt = readMe.text.replaceFirst(/JDA-(.+?)-9/, "JDA-${getDependencyVersion('JDA').replaceAll('_', '__').replaceAll('-', '--')}-9")
    readMe.text = txt.replaceFirst(/lavaplayer-(.*?)-/, "lavaplayer-${getDependencyVersion('lavaplayer')}-")
}

class Version {
    String major, minor, revision

    static String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    String toString() {
        "${major}.${minor}.${revision}_${getBuild()}"
    }
}